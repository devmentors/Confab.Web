@page "/conferences/{conferenceId:guid}/submissions/create"
@using Confab.Web.Core.Hosts
@using Confab.Web.UI.Services
@using System.ComponentModel.DataAnnotations
@using Confab.Web.Core.Conferences
@using Confab.Web.Core.DTO
@using Confab.Web.Core.Speakers
@using Confab.Web.Core.Submissions
@using Confab.Web.Core.Submissions.Requests
@using Confab.Web.Core.Tickets
@inject NavigationManager NavigationManager
@inject ITicketService TicketService
@inject IAuthenticationService AuthenticationService
@inject IConferenceService ConferenceService
@inject IHostService HostService
@inject ISubmissionService SubmissionService
@inject ISpeakerService SpeakerService
@inject IApiResponseHandler ApiResponseHandler

@if (_speaker is {})
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <div style="max-width: 500px; margin-top: 10%;">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Color="Color.Secondary" Align="Align.Center" Typo="Typo.h5"><b>Create Submission</b></MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudForm @bind-IsValid="@_success" Model="@_createSubmissionModel" @bind-Errors="@_errors">
                        <MudTextField ReadOnly="true" @bind-Value="@_conferenceName" HelperText="Conference"></MudTextField>
                        <MudTextField T="string" @bind-Value="@_createSubmissionModel.Title" Required="true" RequiredError="Title is required!"
                                      Validation="@(new Func<string, IEnumerable<string>>(TitleStrength))" HelperText="Title"/>
                        <MudTextField T="string" @bind-Value="@_createSubmissionModel.Description"
                                      Validation="@(new Func<string, IEnumerable<string>>(DescriptionStrength))" Lines="5"
                                      Required="true" RequiredError="Description is required!" HelperText="Description"/>
                        <div class="d-flex">
                            <MudSelect @bind-Value="LevelValue" HelperText="Level">
                                @foreach (Level item in Enum.GetValues(typeof(Level)))
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                        <div class="d-flex">
                            <MudSelect T="string" HelperText="Tags" MultiSelection="true" @bind-SelectedValues="@_selectedTags">
                                @foreach (var tag in _tags)
                                {
                                    <MudSelectItem T="string" Value="@tag">@tag</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                    </MudForm>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_submitted || !_success" OnClick="Create" Class="ml-auto">Create</MudButton>
                </MudCardActions>
            </MudCard>
        </div>
    </MudContainer>
}

@code {
    private class CreateSubmissionModel
    {
        [Required]
        [MinLength(3)]
        [MaxLength(100)]
        public string Title { get; set; }

        [Required]
        [MinLength(10)]
        [MaxLength(1000)]
        public string Description { get; set; }
    }
    
    [Parameter]
    public Guid conferenceId { get; set; }
    private string _conferenceName { get; set; }
    private Guid _userId;
    private SpeakerDto _speaker = new();
    private readonly CreateSubmissionModel _createSubmissionModel = new();
    private bool _success;
    private bool _submitted;
    private string[] _errors = { };
    private List<Guid> _speakersIds = new();
    private HashSet<string> _selectedTags { get; set; } = new();
    private string[] _tags = Array.Empty<string>();
    private readonly List<string> _allTags = new()
    {
        "dotnet",
        "rider",
        "frontend",
        "soft skills",
        "angular",
        "microservices",
        "MVC",
        "spring",
        "typescript",
        "java"
    };

    private Level LevelValue { get; set; } = Level.Beginner;
    private enum Level
    {
        Beginner = 1,
        Elementary = 2,
        Intermediate = 3,
        UpperIntermediate = 4,
        Advanced = 5,
        Expert = 6
    }

    protected override async void OnInitialized()
    {
        var conference = await ApiResponseHandler.HandleAsync(ConferenceService.GetAsync(conferenceId));
        _conferenceName = conference.Name;
        StateHasChanged();
        var userIdString = AuthenticationService.User.Id;
        var userId = new Guid(userIdString);
        _speaker = await ApiResponseHandler.HandleAsync(SpeakerService.GetAsync(userId));
        if (_speaker is null)
        {
            NavigationManager.NavigateTo("/speakers/create");
        }
        _speakersIds.Add(userId);
        _tags = _allTags.ToArray();
    }

    private async Task Create()
    {
        _submitted = true;
        var level = (int) Enum.Parse(typeof(Level), LevelValue.ToString());
        var request = new CreateSubmissionRequest
        {
            ConferenceId = conferenceId,
            Title = _createSubmissionModel.Title,
            Description = _createSubmissionModel.Description,
            Level = level,
            SpeakerIds = _speakersIds,
            Tags = _selectedTags
        };
        var response = await ApiResponseHandler.HandleAsync(SubmissionService.CreateAsync(request));
        _submitted = false;
        
        if (response.Succeeded)
        {
            Snackbar.Add("Submission has been created.", Severity.Success);
            NavigationManager.NavigateTo($"conferences/{conferenceId}");
        }
    }

    private IEnumerable<string> TitleStrength(string title)
    {
        if (string.IsNullOrWhiteSpace(title))
        {
            yield return "Title is required!";
            yield break;
        }
        if (title.Length < 3)
            yield return "Title must be at least of length 3.";
        
        if (title.Length > 100)
            yield return "Title length must be less than 100.";
    }
    
    private IEnumerable<string> DescriptionStrength(string description)
    {
        if (string.IsNullOrWhiteSpace(description))
        {
            yield return "Description is required!";
            yield break;
        }
        
        if (description.Length < 10)
            yield return "Description must be at least of length 10.";
        
        if (description.Length > 1000)
            yield return "Description length must be less than 1000.";
    }
}


