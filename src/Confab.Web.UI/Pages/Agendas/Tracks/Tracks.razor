@page "/conferences/{conferenceId:guid}/tracks"
@using Confab.Web.Core.DTO
@using Confab.Web.UI.Services
@using Confab.Web.Core.Agendas
@inject IAgendaTrackService AgendaTrackService
@inject IApiResponseHandler ApiResponseHandler
@inject NavigationManager NavigationManager

@if (_tracks.Any())
{
    <MudContainer Fixed="true" MaxWidth="MaxWidth.Small">
        <MudTable Items="@_tracks" Hover="true" Breakpoint="Breakpoint.Sm" Style="margin-top: 5%">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Tracks</MudText>
                <MudAppBarSpacer></MudAppBarSpacer>
                <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="() => NavigateToCreate()">Create</MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Track</MudTh>
                @* <MudTh>Action</MudTh> *@
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                @* <MudTd DataLabel="Remove"> *@
                @*     <MudIconButton OnClick="() => OnButtonClicked(context.Id)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Disabled="_submitted"></MudIconButton> *@
                @* </MudTd> *@
            </RowTemplate>
        </MudTable>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudGrid>
            <MudItem xs="12" Style="margin-top: 20%">
                <MudGrid Spacing="1" Justify="Justify.Center">
                    <MudItem>
                        <MudText Typo="Typo.h4"><i>No tracks.</i></MudText>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
        <br/>
        <MudGrid Spacing="1" Justify="Justify.Center">
            <MudItem>
                <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="() => NavigateToCreate()">Create</MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [Parameter]
    public Guid conferenceId { get; set; }
    private List<AgendaTrackDto> _tracks = new();

    protected override async Task OnInitializedAsync()
    {
        await GetTracks();
    }

    private async Task GetTracks()
    {
        _tracks = await ApiResponseHandler.HandleAsync(AgendaTrackService.BrowseAsync(conferenceId));
        StateHasChanged();
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo($"conferences/{conferenceId}/tracks/create");
    }
}